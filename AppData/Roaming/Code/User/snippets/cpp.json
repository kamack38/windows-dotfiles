{
  "Initialize cpp": {
    "prefix": "!!!",
    "body": [
      "#include <${1:bits/stdc++.h}>",
      "",
      "using namespace std;",
      "",
      "int main() {",
      "    $0",
      "    return 0;",
      "}"
    ]
  },

  "Initialize cpp with array": {
    "prefix": "!!",
    "body": [
      "#include <${1:bits/stdc++.h}>",
      "",
      "using namespace std;",
      "",
      "int T[${2:/* length */}];",
      "",
      "int main() {",
      "    $0",
      "    return 0;",
      "}"
    ]
  },

  "Make ur code faster": {
    "prefix": "!fast",
    "body": ["ios_base::sync_with_stdio(false);", "cin.tie(0);", "cout.tie(0);"]
  },

  "Declare function main": {
    "prefix": "!main",
    "body": ["int main () {", "    $0", "    return 0;", "}"]
  },

  "include": {
    "prefix": "#inc",
    "body": ["#include <${1:bits/stdc++.h}>$0"],
    "description": "snippet for #include"
  },

  "namespace": {
    "prefix": "!using",
    "body": ["using namespace ${1:std};$0"],
    "description": "Add namespace"
  },

  "vector": {
    "prefix": "!vec",
    "body": ["vector<${1:int}> ${2:vec};"],
    "description": "Create vector"
  },

  "array": {
    "prefix": "!arr",
    "body": ["array<${1:int}, ${2:2}>"],
    "description": "Create an array"
  },

  "set": {
    "prefix": "!set",
    "body": ["set<${1:int}> S;"],
    "description": "Create set"
  },

  "unordered set": {
    "prefix": "!uset",
    "body": ["unordered_set<${1:int}> S;"],
    "description": "Creates unordered set"
  },

  "multiset": {
    "prefix": "!mset",
    "body": ["multiset<${1:int}> S;"],
    "description": "Creates multiset"
  },

  "unordered multiset": {
    "prefix": "!umset",
    "body": ["unordered_multiset<${1:int}> S;"],
    "description": "Creates unordered multiset"
  },

  "map": {
    "prefix": "!map",
    "body": ["map<${1:int}, ${2:int}> M;"],
    "description": "Create map"
  },

  "unordered map": {
    "prefix": "!umap",
    "body": ["unordered_map<${1:int}, ${2:int}> M;"],
    "description": "Create unordered map"
  },

  "queue": {
    "prefix": "!queue",
    "body": ["queue<${1:int}> Q;"],
    "description": "Create queue"
  },

  "dequeue": {
    "prefix": "!dequeue",
    "body": ["dequeue<${1:int}> Q;"],
    "description": "Create dequeue"
  },

  "priority queue": {
    "prefix": "!pqueue",
    "body": ["priority_queue<${1:int}> Q;"],
    "description": "Create priority queue"
  },

  "nest permutation": {
    "prefix": "!nperm",
    "body": ["next_permutation(${1:vec}.begin(), ${1:vec}.end());"],
    "description": "Create priority queue"
  },

  "swap": {
    "prefix": "!swap",
    "body": ["swap(${1:a}, ${2:b});"],
    "description": "Create unordered set"
  },

  "tab": {
    "prefix": "!tab",
    "body": ["${1:int} A[${2:1000000}];"],
    "description": "Create array"
  },

  "pair": {
    "prefix": "!pair",
    "body": ["pair<${1:int}, ${2:int}>"],
    "description": "Create a pair"
  },

  "endline": {
    "prefix": "!n",
    "body": "<< '\\n'",
    "description": "Adds endline to cout"
  },

  "fastPowMod": {
    "prefix": "!fastPowMod",
    "body": [
      "long long myPow(int a, int b, int m) {",
      "  if (b == 0) return 1;",
      "  if (b % 2 == 0) {",
      "    long long tmp = myPow(a, b / 2, m);",
      "    return (tmp * tmp) % m;",
      "  } else {",
      "    long long tmp = myPow(a, b / 2, m);",
      "    return (((tmp * tmp) % m) * a) % m;",
      "  }",
      "}"
    ],
    "description": "Quickly calculate a^b mod c"
  },

  "pow": {
    "prefix": "!pow",
    "body": [
      "long long powi(int y, int x) {",
      "    if (x == 0) return 1;",
      "    return y * powi(y, x - 1);",
      "}"
    ],
    "description": "Quickly calculate a^b mod c"
  },

  "longlong": {
    "prefix": "!LL",
    "body": ["using LL = long long;"],
    "description": "Create lias LL of long long"
  },

  "Normal for loop": {
    "prefix": "!for",
    "body": ["for (int i = 0; i < ${1:n}; i++) {", "    $2", "}$0"],
    "description": "Simple for loop"
  },

  "Reverse for loop": {
    "prefix": "!forr",
    "body": ["for (int i = ${1:n - 1}; i >= 0; i--) {", "    $2", "}$0"],
    "description": "Reverse for loop"
  },

  "Colon for loop": {
    "prefix": "!fora",
    "body": ["for (auto i : ${1:vec}) {", "    $2", "}$0"],
    "description": "Reverse for loop"
  },

  "find": {
    "prefix": "!find",
    "body": [
      "int Find(int a) {",
      "if (A[a] != a) A[a] = Find(A[a]);",
      "return A[a];",
      "}"
    ],
    "description": "Find function"
  },

  "binary search": {
    "prefix": "!binsrc",
    "body": [
      "int binSrc(int a, int b) {",
      "  while (a + 1 != b) {",
      "    int c = (a + b) / 2;",
      "    if (${1:/* Your condition goes here */}) {",
      "        a = c;",
      "    } else {",
      "        b = c;",
      "    }",
      "  }",
      "  return a;",
      "}"
    ],
    "description": "Binary search function"
  },

  "fileheader": {
    "prefix": "!fileheader",
    "body": [
      "/**",
      "**********************************************************************************************************************************************************************************************************************************",
      "* @file:\t$TM_FILENAME",
      "* @author:\t$1",
      "* @date:\t$CURRENT_YEAR.$CURRENT_MONTH.$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND $CURRENT_DAY_NAME",
      "* @brief:\t$2",
      "**********************************************************************************************************************************************************************************************************************************",
      "**/"
    ],
    "description": "Initialize fileheader"
  }
}
